<?php 

class BetgameCompetitionTestCase extends DrupalWebTestCase {
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Betgame Competition unit tests',
      'description' => 'Test that Competition works properly.',
      'group' => 'Betgame',
    );
  }

  function setUp() {
    parent::setUp('betgame', 'betgame_matchplan', 'betgame_competition');

    //$this->privileged_user = $this->drupalCreateUser(array('administer matchplan', 'administer betgame', 'access betgame'));
    //$this->drupalLogin($this->privileged_user);
  }

  public function testDaoInstantiation() {
    $Dao = betgame_competition_dao();
    $this->assertNotNull($Dao);
  }

  public function testControllerInstantiation() {
    $controller = betgame_competition_controller();
    $this->assertNotNull($controller);
  }

  public function testCreateCompetition() {
    $c = new Competition();
    $c->setName("Test Competition");
    $c->setMatchplan(100);

    $c_id = betgame_competition_dao()->storeCompetition($c);

    $this->assertNotNull($c_id);

    $lc = betgame_competition_dao()->findCompetition($c_id);

    $this->assertNotNull($lc);
    $this->assertEqual($c_id, $lc->getId());
    $this->assertEqual("Test Competition", $lc->getName());
    $this->assertEqual(100, $lc->getMatchplan());

  }

  public function testCreateGroup() {
    $g = new Group();
    $g->setName("Test Group");
    $g->setShortname("A");
    $g->setCompetition(100);
    $g->setWeight(1);

    $g_id = betgame_competition_dao()->storeGroup($g);

    $this->assertNotNull($g_id);

    $this->assertEqual(1, count(betgame_competition_dao()->findGroups(100)));

    $lg = betgame_competition_dao()->findGroup($g_id);

    $this->assertNotNull($lg);
    $this->assertEqual($g_id, $lg->getId());
    $this->assertEqual("Test Group", $lg->getName());
    $this->assertEqual("A", $lg->getShortname());
    $this->assertEqual(100, $lg->getCompetition());
    $this->assertEqual(1, $lg->getWeight());

  }

  public function testCreateTeam() {
    $g = new Group();
    $g->setName("Test Group");
    $g->setShortname("A");
    $g->setCompetition(100);
    $g->setWeight(1);

    $g_id = betgame_competition_dao()->storeGroup($g);
    $this->assertNotNull($g_id);

    $t = new Team();
    $t->setGroupid($g_id);
    $t->setName("Team 1");
    $t->setInitialsetposition(9);
    $t->setCompetition(10);

    $team_id = betgame_competition_dao()->storeTeam($t);

    $this->assertEqual(1, count(betgame_competition_dao()->findTeams(10)));

    $lt = betgame_competition_dao()->findTeam($team_id);

    $this->assertNotNull($lt);
    $this->assertEqual($team_id, $lt->getId());
    $this->assertEqual("Team 1", $lt->getName());
    $this->assertEqual(10, $lt->getCompetition());
    $this->assertEqual(9, $lt->getInitialsetposition());
    $this->assertEqual($g_id, $lt->getGroupid());

  }

  public function testCreateGameday() {
    $g = new Gameday();
    $g->setName("Test GD");
    $g->setWeight(23);
    $g->setCompetition(100);
    $g->setIsallornothing(1);

    $g_id = betgame_competition_dao()->storeGameday($g);

    $this->assertNotNull($g_id);

    $this->assertEqual(1, count(betgame_competition_dao()->findGamedays(100)));

    $lg = betgame_competition_dao()->findGameday($g_id);

    $this->assertNotNull($lg);
    $this->assertEqual($g_id, $lg->getId());
    $this->assertEqual("Test GD", $lg->getName());
    $this->assertEqual(1, $lg->getIsallornothing());
    $this->assertEqual(100, $lg->getCompetition());
    $this->assertEqual(23, $lg->getWeight());

  }

  public function testCreateAutoCompetitionData() {

    $matchplan = new MatchPlan();
    $matchplan->setName('Test Matchplan 1');
    $matchplan->setTeams(8);
    $matchplan->setGroups(2);
    $matchplan->setGamedays(5);

    $matchplan_id = betgame_matchplan_dao()->storeMatchPlan($matchplan);
    $this->assertNotNull($matchplan_id);

    $c = new Competition();
    $c->setName("Test Competition");
    $c->setMatchplan($matchplan_id);

    $competition_id = betgame_competition_dao()->storeCompetition($c);

    $this->assertNotNull($competition_id);

    betgame_competition_controller()->autoCreateGroupsTeams($competition_id);

    // check amount of groups and teams
    $groups = betgame_competition_dao()->findGroups($competition_id);
    $this->assertNotNull($groups);
    $this->assertEqual(2, count($groups));

    $teams = betgame_competition_dao()->findTeams($competition_id);
    $this->assertNotNull($teams);
    $this->assertEqual(8, count($teams));

    $gamedays = betgame_competition_dao()->findGamedays($competition_id);
    $this->assertNotNull($gamedays);
    $this->assertEqual(5, count($gamedays));

    // check group data
    $group1 = array_shift($groups);
    $this->assertEqual('Group 1', $group1->getName());
    $this->assertEqual(1, $group1->getWeight());
    $this->assertEqual($competition_id, $group1->getCompetition());

    $group2 = array_shift($groups);
    $this->assertEqual('Group 2', $group2->getName());
    $this->assertEqual(2, $group2->getWeight());
    $this->assertEqual($competition_id, $group2->getCompetition());


    // check team data
    $team1 = array_shift($teams);
    $this->assertEqual('Team 1', $team1->getName());
    $this->assertEqual(1, $team1->getInitialsetposition());
    $this->assertEqual($group1->getId(), $team1->getGroupid());
    $this->assertEqual($competition_id, $team1->getCompetition());


    $team2 = array_shift($teams);
    $team3 = array_shift($teams);
    $team4 = array_shift($teams);

    $team5 = array_shift($teams);
    $this->assertEqual('Team 5', $team5->getName());
    $this->assertEqual(5, $team5->getInitialsetposition());
    $this->assertEqual($group2->getId(), $team5->getGroupid());
    $this->assertEqual($competition_id, $team5->getCompetition());

    // check gameday data
    $gd1 = array_shift($gamedays);
    $this->assertEqual('Gameday 1', $gd1->getName());
    $this->assertEqual(0, $gd1->getIsallornothing());
    $this->assertEqual(1, $gd1->getWeight());
    $this->assertEqual($competition_id, $gd1->getCompetition());

    // check helper methods

    $g1 = betgame_competition_controller()->getGroupByIndex($competition_id, 1);
    $this->assertNotNull($g1);
    $this->assertEqual('Group 1', $g1->getName());
    
    $g2 = betgame_competition_controller()->getGroupByIndex($competition_id, 2);
    $this->assertNotNull($g2);
    $this->assertEqual('Group 2', $g2->getName());

    $gd3 = betgame_competition_controller()->getGamedayByIndex($competition_id, 3);
    $this->assertNotNull($gd3);
    $this->assertEqual('Gameday 3', $gd3->getName());

    $t3 = betgame_competition_controller()->getTeamByIndex($competition_id, $g1->getId(), 3);
    $this->assertNotNull($t3);
    $this->assertEqual('Team 3', $t3->getName());
    
    $t6 = betgame_competition_controller()->getTeamByIndex($competition_id, $g2->getId(), 2);
    $this->assertNotNull($t6);
    $this->assertEqual('Team 6', $t6->getName());

    // generate matches
    $this->addMatchplanFixtures($matchplan_id);
    betgame_competition_controller()->generateMatches($competition_id);

    $matches = betgame_competition_dao()->findMatchs($competition_id);
    $match1 = array_shift($matches);

    $this->assertNull($match1->getType());
    $this->assertEqual(1, $match1->getGamenumber());
    $this->assertEqual($competition_id, $match1->getCompetition());
    $this->assertEqual(0, $match1->getKickoff());

    $g = betgame_competition_dao()->findGroup($match1->getGroupid());
    $this->assertNotNull($g);
    if($g) {
      $this->assertEqual('Group 1', $g->getName());
    }

    $gd = betgame_competition_dao()->findGameday($match1->getGameday());
    $this->assertNotNull($gd);
    if($gd) {
      $this->assertEqual('Gameday 1', $gd->getName());
    }

    $th = betgame_competition_dao()->findTeam($match1->getHometeam());
    $this->assertNotNull($th);
    if($th) {
      $this->assertEqual('Team 1', $th->getName());
      $this->assertEqual(1, $th->getInitialsetposition());
    }

    $tg = betgame_competition_dao()->findTeam($match1->getGuestteam());
    $this->assertNotNull($tg);
    if($tg) {
      $this->assertEqual('Team 2', $tg->getName());
      $this->assertEqual(2, $tg->getInitialsetposition());
    }

    $this->assertEqual('', unserialize($match1->getPlaceholderhomeval()));
    $this->assertEqual('', unserialize($match1->getPlaceholderguestval()));

    $match2 = array_shift($matches);

    $this->assertNull($match2->getType());
    $this->assertEqual(2, $match2->getGamenumber());
    $this->assertEqual($competition_id, $match2->getCompetition());
    $this->assertEqual(0, $match2->getGroupid());
    $gd = betgame_competition_dao()->findGameday($match2->getGameday());
    $this->assertNotNull($gd);
    if($gd) {
      $this->assertEqual('Gameday 4', $gd->getName());
    }

    $this->assertTrue($match2->isPlaceholder());
    $this->assertNotNull($match2->getPlaceholderhomeval());
    $this->assertEqual('PlaceholderGroupResult', get_class(unserialize($match2->getPlaceholderhomeval())));

    $this->assertNotNull($match2->getPlaceholderguestval());
    $this->assertEqual('PlaceholderGroupResult', get_class(unserialize($match2->getPlaceholderguestval())));
     

    $match3 = array_shift($matches);
    $match4 = array_shift($matches);

    $this->assertNull($match4->getType());
    $this->assertEqual(4, $match4->getGamenumber());
    $this->assertEqual($competition_id, $match4->getCompetition());
    $this->assertEqual(0, $match4->getGroupid());
    $gd = betgame_competition_dao()->findGameday($match4->getGameday());
    $this->assertNotNull($gd);
    if($gd) {
      $this->assertEqual('Gameday 5', $gd->getName());
    }

    $this->assertTrue($match4->isPlaceholder());
    $this->assertNotNull($match4->getPlaceholderhomeval());
    $this->assertEqual('PlaceholderGameResult', get_class(unserialize($match4->getPlaceholderhomeval())));

    $this->assertNotNull($match4->getPlaceholderguestval());
    $this->assertEqual('PlaceholderGameResult', get_class(unserialize($match4->getPlaceholderguestval())));

  }


  private function addMatchplanFixtures($m_id) {
    $f = new FixtureGroupMatch();
    $f->setMatchplan($m_id);
    $f->setGamenumber(1);
    $f->setWeight(1);
    $f->setGamedayindex(1);
    $f->setHomegroup(1);
    $f->setGuestgroup(1);
    $f->setHomegroupsetposition(1);
    $f->setGuestgroupsetposition(2);

    betgame_matchplan_dao()->storeFixture($f);

    $f =new FixtureGroupPhaseResult();
    $f->setMatchplan($m_id);
    $f->setGamenumber(2);
    $f->setWeight(2);
    $f->setGamedayindex(4);
    $f->setHomegroup(2);
    $f->setHomegroupresultposition(1);
    $f->setGuestgroup(1);
    $f->setGuestgroupresultposition(2);

    betgame_matchplan_dao()->storeFixture($f);

    $f =new FixtureGroupPhaseResult();
    $f->setMatchplan($m_id);
    $f->setGamenumber(3);
    $f->setWeight(3);
    $f->setGamedayindex(4);
    $f->setHomegroup(1);
    $f->setHomegroupresultposition(2);
    $f->setGuestgroup(1);
    $f->setGuestgroupresultposition(2);

    betgame_matchplan_dao()->storeFixture($f);

    $f =new FixtureAllOrNothingMatch();
    $f->setMatchplan($m_id);
    $f->setGamenumber(4);
    $f->setWeight(4);
    $f->setGamedayindex(5);
    $f->setHomegamenumber(2);
    $f->setGuestgamenumber(3);

    betgame_matchplan_dao()->storeFixture($f);

  }

  public function testDeleteCompetition() {
  
    $matchplan = new MatchPlan();
    $matchplan->setName('Test Matchplan 1');
    $matchplan->setTeams(6);
    $matchplan->setGroups(1);
    $matchplan->setGamedays(5);
  
    $matchplan_id = betgame_matchplan_dao()->storeMatchPlan($matchplan);
    $this->assertNotNull($matchplan_id);
  
    $c = new Competition();
    $c->setName("Test Competition");
    $c->setMatchplan($matchplan_id);
  
    $competition_id = betgame_competition_dao()->storeCompetition($c);
  
    $this->assertNotNull($competition_id);
  
    betgame_competition_controller()->autoCreateGroupsTeams($competition_id);
    
    // generate matches
    $this->addMatchplanFixtures($matchplan_id);
    betgame_competition_controller()->generateMatches($competition_id);
    
    betgame_competition_dao()->deleteCompetition($competition_id);
    
    // check that competition and depending data has been deleted
    $lc = betgame_competition_dao()->findCompetition($competition_id);
    $this->assertNull($lc);
    
    $this->assertEqual(0, count(betgame_competition_dao()->findGroups($competition_id)));
    $this->assertEqual(0, count(betgame_competition_dao()->findTeams($competition_id)));
    $this->assertEqual(0, count(betgame_competition_dao()->findGamedays($competition_id)));
    $this->assertEqual(0, count(betgame_competition_dao()->findMatchs($competition_id)));
    
  }
  

}